package MBS;

import javax.swing.*;
import javax.swing.SwingUtilities;
import java.awt.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import javax.swing.border.EmptyBorder;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;



public class MovieApp {
    public static void main(String[] args) {
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception e) {
            // fallback to default
        }
        SwingUtilities.invokeLater(LoginScreen::new);
    }
}

// Database
class Database {
    static Map<String, Account> accounts = new HashMap<>();
    static List<Movie> movies = new ArrayList<>();
    static List<Movie> comingSoon = new ArrayList<>();
    static Map<String, Cart> carts = new HashMap<>();

    static {
        movies.add(new Movie("Inception", "Nolan", 1900, new String[]{"7:00PM", "9:30PM"}, 8.8f, 15.0f));
        movies.add(new Movie("The Matrix", "Wachowskis", 1901, new String[]{"8:00PM", "10:00PM"}, 9.0f, 12.0f));

        comingSoon.add(new Movie("Spider-Man 4", "Jon Watts", 1904, new String[]{}, 0.0f, 0.0f));
        comingSoon.add(new Movie("Thunderbolts", "Jake Schreier", 1905, new String[]{}, 0.0f, 0.0f));
        comingSoon.add(new Movie("Fantastic Four", "Matt Shakman", 1907, new String[]{}, 0.0f, 0.0f));
        comingSoon.add(new Movie("Blade", "Yann Demange", 1908, new String[]{}, 0.0f, 0.0f));
    }
}

// Account
class Account {
    String email, password;
    int id;

    public Account(String email, String password) {
        this.email = email;
        this.password = password;
        this.id = new Random().nextInt(10000);
    }

    public Cart getCart() {
        return Database.carts.computeIfAbsent(email, k -> new Cart(email));
    }
}

// Cart
class Cart {
    String accountEmail;
    List<MovieTicket> items = new ArrayList<>();

    public Cart(String email) {
        this.accountEmail = email;
    }

    public void addToCart(Movie movie, String showtime) {
        items.add(new MovieTicket(movie, showtime));
    }

    public float getTotal() {
        return (float) items.stream().mapToDouble(t -> t.movie.cost).sum();
    }

    public void clear() {
        items.clear();
    }
}

// Movie
class Movie {
    String title, director;
    int movieId;
    String[] showtimes;
    float avgReview, cost;

    public Movie(String title, String director, int movieId, String[] showtimes, float avgReview, float cost) {
        this.title = title;
        this.director = director;
        this.movieId = movieId;
        this.showtimes = showtimes;
        this.avgReview = avgReview;
        this.cost = cost;
    }

    public String toString() {
        return title + " â€” " + director + (avgReview > 0 ? " | Rating: " + avgReview : " (Coming Soon)");
    }
}

// Ticket
class MovieTicket {
    Movie movie;
    String showtime;

    public MovieTicket(Movie movie, String showtime) {
        this.movie = movie;
        this.showtime = showtime;
    }

    public String toString() {
        return movie.title + " @ " + showtime + " ($" + movie.cost + ")";
    }
}

// Login
class LoginScreen extends JFrame {
    JTextField emailField;
    JPasswordField passwordField;

    public LoginScreen() {
        setTitle("Login");
        setSize(300, 200);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        JPanel panel = new JPanel(new GridLayout(3, 2, 10, 10));
        panel.setBorder(new EmptyBorder(15, 15, 15, 15));

        panel.add(new JLabel("Email:"));
        emailField = new JTextField();
        panel.add(emailField);

        panel.add(new JLabel("Password:"));
        passwordField = new JPasswordField();
        panel.add(passwordField);

        JButton loginBtn = new JButton("Login");
        loginBtn.addActionListener(e -> login());
        panel.add(loginBtn);

        JButton signupBtn = new JButton("Sign Up");
        signupBtn.addActionListener(e -> signup());
        panel.add(signupBtn);

        add(panel);
        setVisible(true);
    }

    private void login() {
        String email = emailField.getText();
        String pass = new String(passwordField.getPassword());
        Account user = Database.accounts.get(email);
        if (user != null && user.password.equals(pass)) {
            setVisible(false);
            new BrowseMenu(user, this);
        } else {
            JOptionPane.showMessageDialog(this, "Invalid login.");
        }
    }

    private void signup() {
        String email = emailField.getText();
        String pass = new String(passwordField.getPassword());
        if (!Database.accounts.containsKey(email)) {
            Database.accounts.put(email, new Account(email, pass));
            JOptionPane.showMessageDialog(this, "Account created. You can now login.");
        } else {
            JOptionPane.showMessageDialog(this, "Account already exists.");
        }
    }
}

// Main Movie View
class MainScreen extends JFrame {
    protected JPanel moviePanel;

    public MainScreen(Account account, JFrame parent) {
        setTitle("Available Movies");
        setSize(500, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());

        moviePanel = new JPanel();
        moviePanel.setLayout(new BoxLayout(moviePanel, BoxLayout.Y_AXIS));
        JScrollPane scrollPane = new JScrollPane(moviePanel);
        add(scrollPane, BorderLayout.CENTER);

        for (Movie m : Database.movies) {
            JPanel mPanel = new JPanel();
            mPanel.setLayout(new BoxLayout(mPanel, BoxLayout.Y_AXIS));
            mPanel.setBorder(BorderFactory.createTitledBorder(m.title));
            JLabel label = new JLabel(m.toString());
            mPanel.add(label);
            for (String showtime : m.showtimes) {
                JButton timeBtn = new JButton("Book: " + showtime);
                timeBtn.addActionListener(e -> {
                    account.getCart().addToCart(m, showtime);
                    JOptionPane.showMessageDialog(this, "Added to cart: " + m.title + " at " + showtime);
                });
                mPanel.add(timeBtn);
            }
            moviePanel.add(mPanel);
        }

        JButton backBtn = new JButton("Back");
        backBtn.addActionListener(e -> {
            dispose();
            parent.setVisible(true);
        });
        add(backBtn, BorderLayout.SOUTH);

        revalidate();
        repaint();
        setVisible(true);
    }
}

// Search Results
class SearchResultsScreen extends MainScreen {
    public SearchResultsScreen(Account account, List<Movie> searchResults, JFrame parent) {
        super(account, parent);
        moviePanel.removeAll();
        for (Movie m : searchResults) {
            JPanel mPanel = new JPanel();
            mPanel.setLayout(new BoxLayout(mPanel, BoxLayout.Y_AXIS));
            mPanel.setBorder(BorderFactory.createTitledBorder(m.title));
            JLabel label = new JLabel(m.toString());
            mPanel.add(label);
            for (String showtime : m.showtimes) {
                JButton timeBtn = new JButton("Book: " + showtime);
                timeBtn.addActionListener(e -> {
                    account.getCart().addToCart(m, showtime);
                    JOptionPane.showMessageDialog(this, "Added to cart: " + m.title + " at " + showtime);
                });
                mPanel.add(timeBtn);
            }
            moviePanel.add(mPanel);
        }
        revalidate();
        repaint();
    }
}

// Menu
class BrowseMenu extends JFrame {
    public BrowseMenu(Account account, JFrame parent) {
        setTitle("Browse Options");
        setSize(300, 200);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new GridLayout(4, 1, 10, 10));

        JButton browseBtn = new JButton("Browse All Movies");
        JButton searchBtn = new JButton("Search Movies");
        JButton comingSoonBtn = new JButton("Future Movies");
        JButton backBtn = new JButton("Back");

        browseBtn.addActionListener(e -> {
            setVisible(false);
            new MainScreen(account, this);
        });

        searchBtn.addActionListener(e -> {
            String query = JOptionPane.showInputDialog(this, "Enter movie title to search:");
            if (query != null && !query.trim().isEmpty()) {
                List<Movie> results = new ArrayList<>();
                for (Movie m : Database.movies) {
                    if (m.title.toLowerCase().contains(query.toLowerCase())) {
                        results.add(m);
                    }
                }
                if (results.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "No results found.");
                } else {
                    setVisible(false);
                    new SearchResultsScreen(account, results, this);
                }
            }
        });

        comingSoonBtn.addActionListener(e -> {
            StringBuilder sb = new StringBuilder("Upcoming Movies:\n\n");
            for (Movie m : Database.comingSoon) {
                sb.append(m.title).append(" by ").append(m.director).append("\n");
            }
            JOptionPane.showMessageDialog(this, sb.toString());
        });

        backBtn.addActionListener(e -> {
            dispose();
            parent.setVisible(true);
        });

        add(browseBtn);
        add(searchBtn);
        add(comingSoonBtn);
        add(backBtn);
        setVisible(true);
    }
}
