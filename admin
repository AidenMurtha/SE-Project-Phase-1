package com.MBSTeam4.controller;

import com.MBSTeam4.model.Database;
import com.MBSTeam4.model.Movie;
import jakarta.servlet.http.HttpSession;
import org.springframework.ui.Model;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.List; //Util for list used in multiple selection of movie locations

@Controller
@RequestMapping("/admin")
public class AdminController {
    
    @GetMapping("/home")
    public String homePage(Model model, HttpSession session) {
        String adminId = (String) session.getAttribute("adminId");
        
        if (adminId == null) {
            return "redirect:/home";
        } else {
            model.addAttribute("username", adminId);
            model.addAttribute("movies", Database.movies);
            model.addAttribute("locations", Database.locations);
            model.addAttribute("accounts", Database.accounts.values());
        }
        
        return "admin-home"; 
    }
    
    @PostMapping("/add-movie")
    public String addMovie(@RequestParam("title") String title, 
                           @RequestParam("director") String director,
                           @RequestParam("showtime") String showtime, 
                           @RequestParam("locations") List<String> locations,
                           @RequestParam("imgUrl") String imgUrl,
                           @RequestParam("movieId") int movieId, 
                           @RequestParam("avgReview") float avgReview, 
                           @RequestParam("cost") float cost,
                           Model model, HttpSession session) {

        if (session.getAttribute("adminId") == null) {
            return "redirect:/home";
        }

        int idIncrement = 0;
        for (String loc : locations) {
            Movie newMovie = new Movie(
                title,
                director,
                showtime,
                loc,
                imgUrl,
                movieId + idIncrement,
                avgReview,
                cost
            );
            Database.movies.add(newMovie);
            idIncrement++;
        }

        Database.saveMovies();
        model.addAttribute("success", "Movie added successfully to selected locations!");
        return "redirect:/admin/home";
    }
    
    @PostMapping("/delete-movie")
    public String deleteMovie(@RequestParam("movieId") int movieId, HttpSession session) {
        if (session.getAttribute("adminId") == null) {
            return "redirect:/home";
        }
        Database.movies.removeIf(movie -> movie.getMovieId() == movieId);
        Database.saveMovies();
        return "redirect:/admin/home";
    }
    
    @GetMapping("/edit-movie")
    public String showEditForm(@RequestParam("movieId") int movieId, Model model, HttpSession session) {
        if (session.getAttribute("adminId") == null) {
            return "redirect:/home";
        }
        for (Movie movie : Database.movies) {
            if (movie.getMovieId() == movieId) {
                model.addAttribute("movie", movie);
                return "edit-movie";
            }
        }
        return "redirect:/admin/home";
    }
    
    @PostMapping("/edit-movie")
    public String editMovie(@RequestParam("title") String title,
                            @RequestParam("director") String director,
                            @RequestParam("showtime") String showtime,
                            @RequestParam("location") String location,
                            @RequestParam("imgUrl") String imgUrl,
                            @RequestParam("movieId") int movieId,
                            @RequestParam("avgReview") float avgReview,
                            @RequestParam("cost") float cost,
                            HttpSession session) {

        if (session.getAttribute("adminId") == null) {
            return "redirect:/home";
        }

        for (Movie movie : Database.movies) {
            if (movie.getMovieId() == movieId) {
                movie.setTitle(title);
                movie.setDirector(director);
                movie.setShowtime(showtime);
                movie.setLocation(location);
                movie.setImgUrl(imgUrl);
                movie.setAvgReview(avgReview);
                movie.setCost(cost);
                break;
            }
        }
        Database.saveMovies();
        return "redirect:/admin/home";
    }
    
    @PostMapping("/delete-account")
    public String deleteAccount(@RequestParam("accountId") String accountId, HttpSession session) {
        if (session.getAttribute("adminId") == null) {
            return "redirect:/home";
        }

        Database.accounts.remove(accountId);
        Database.carts.remove(accountId); 
        Database.saveAccounts();
        Database.saveCarts();
        
        return "redirect:/admin/home";
    }
}


<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
  <meta charset="UTF-8">
  <title>Admin - Movie Booking System</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
      background-color: #f7f7f7;
    }
    h2 a {
      text-decoration: none;
      color: #333;
    }
    .top-right {
      position: absolute;
      top: 10px;
      right: 20px;
      font-weight: bold;
      font-size: 14px;
    }
    .section {
      display: none;
      margin-top: 20px;
      padding: 20px;
      background: #fff;
      border-radius: 8px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }
    .toggle-btn {
      display: inline-block;
      background-color: #007bff;
      color: white;
      padding: 10px 20px;
      margin: 10px 0;
      font-size: 16px;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      transition: background-color 0.3s;
    }
    .toggle-btn:hover {
      background-color: #0056b3;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 10px;
    }
    th, td {
      border: 1px solid #ccc;
      padding: 8px;
      text-align: left;
    }
    th {
      background-color: #007bff;
      color: white;
    }
	input[type="text"], input[type="number"], select {
	  width: 100%;
	  padding: 6px;
	  margin-top: 4px;
	  margin-bottom: 8px;
	  border: 1px solid #ccc;
	  border-radius: 4px;
	  box-sizing: border-box; /* <-- this is the new important line */
	}

    button[type="submit"] {
      background-color: #28a745;
      color: white;
      padding: 8px 14px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      margin-top: 4px;
      transition: background-color 0.3s;
    }
    button[type="submit"]:hover {
      background-color: #218838;
    }
    form {
      margin-bottom: 0;
    }
    .delete-btn {
      background-color: #dc3545;
      margin-left: 5px;
    }
    .delete-btn:hover {
      background-color: #c82333;
    }
  </style>
</head>
<body>

<h2><a th:href="@{/admin/home}">Movie Booking System - Admin Panel</a></h2>

<div class="top-right">
  Welcome, <span th:text="${username}">Guest</span>
  <form th:action="@{/logout}" method="get" style="display: inline;">
    <button type="submit" class="toggle-btn" style="background-color: #ffc107; color: black;">Logout</button>
  </form>
</div>

<div style="margin-top: 60px;">

<!-- === MOVIE TABLE === -->
<button class="toggle-btn" onclick="toggleSection('movieTable')">Current Movies</button>
<div id="movieTable" class="section">
  <table>
    <thead>
      <tr>
        <th>Title</th>
        <th>Director</th>
        <th>Showtime</th>
        <th>Location</th>
        <th>Movie ID</th>
        <th>Average Review</th>
        <th>Cost</th>
        <th>Image URL</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr th:each="movie : ${movies}">
        <form th:action="@{/admin/edit-movie}" method="post">
          <td><input type="text" name="title" th:value="${movie.title}" required></td>
          <td><input type="text" name="director" th:value="${movie.director}" required></td>
          <td><input type="text" name="showtime" th:value="${movie.showtime}" required></td>
          <td>
            <select name="location" required>
              <option th:each="location : ${locations}" th:value="${location}" th:text="${location}" th:selected="${location == movie.location}"></option>
            </select>
          </td>
          <td><input type="number" name="movieId" th:value="${movie.movieId}" readonly></td>
          <td><input type="number" step="0.1" name="avgReview" th:value="${movie.avgReview}" required></td>
          <td><input type="number" step="0.01" name="cost" th:value="${movie.cost}" required></td>
          <td><input type="text" name="imgUrl" th:value="${movie.imgUrl}" required></td>
          <td style="white-space: nowrap;">
            <button type="submit">Save</button>
        </form>
        <form th:action="@{/admin/delete-movie}" method="post" onsubmit="return confirm('Delete this movie?');" style="display:inline;">
          <input type="hidden" name="movieId" th:value="${movie.movieId}">
          <button type="submit" class="delete-btn">Delete</button>
        </form>
          </td>
      </tr>
    </tbody>
  </table>
</div>

<!-- === ADD MOVIE FORM === -->
<button class="toggle-btn" onclick="toggleSection('addMovieForm')">Add New Movie</button>
<div id="addMovieForm" class="section">
  <form th:action="@{/admin/add-movie}" method="post">
    <label>Title:</label>
    <input type="text" name="title" required>
    <label>Director:</label>
    <input type="text" name="director" required>
    <label>Showtime:</label>
    <input type="text" name="showtime" required>
    <label>Movie ID:</label>
    <input type="number" name="movieId" required>
    <label>Avg Review:</label>
    <input type="number" step="0.1" name="avgReview" required>
    <label>Cost:</label>
    <input type="number" step="0.01" name="cost" required>
    <label>Locations:</label>
    <select name="locations" multiple required style="height: 120px;">
      <option th:each="location : ${locations}" th:value="${location}" th:text="${location}"></option>
    </select>
    <label>Image URL:</label>
    <input type="text" name="imgUrl" required>
    <br>
    <button type="submit" style="margin-top: 10px;">Add Movie</button>
  </form>
</div>

<!-- === ACCOUNTS TABLE === -->
<button class="toggle-btn" onclick="toggleSection('accountTable')">View Accounts</button>
<div id="accountTable" class="section">
  <table>
    <thead>
      <tr>
        <th>Account ID</th>
        <th>Username</th>
        <th>Email</th>
        <th>Phone</th>
        <th>Location</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr th:each="account : ${accounts}">
        <td th:text="${account.id}"></td>
        <td th:text="${account.username}"></td>
        <td th:text="${account.email}"></td>
        <td th:text="${account.phone}"></td>
        <td th:text="${account.location}"></td>
        <td>
          <form th:action="@{/admin/delete-account}" method="post" onsubmit="return confirm('Delete this account?');">
            <input type="hidden" name="accountId" th:value="${account.id}">
            <button type="submit" class="delete-btn">Delete</button>
          </form>
        </td>
      </tr>
    </tbody>
  </table>
</div>

</div> <!-- End Main Div -->

<!-- === TOGGLE SCRIPT === -->
<script>
function toggleSection(id) {
  const section = document.getElementById(id);
  if (section.style.display === "block") {
    section.style.display = "none";
  } else {
    section.style.display = "block";
  }
}
</script>

</body>
</html>

