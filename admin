package MBS;


import javax.swing.*;

import java.awt.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;


public class MovieApp {
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new LoginScreen());
        Database.accounts.put("admin", new Account("admin", "admin123"));
    }
}

class Database {
    static Map<String, Account> accounts = new HashMap<>();
    static List<Movie> movies = new ArrayList<>();
    static Map<String, Cart> carts = new HashMap<>();

    static {
        movies.add(new Movie("Inception", "Nolan", 1900, "7:00PM", 8.8f, 15.0f));
        movies.add(new Movie("The Matrix", "Wachowskis", 1901, "9:00PM", 9.0f, 12.0f));
        movies.add(new Movie("Transformers The Dark Side of the Moon", "Nolan", 1901, "10:00PM", 9.0f, 12.0f));

    }
}

class Account {
    String email, password, location;
    int id;
    String phone;

    public Account(String email, String password) {
        this.email = email;
        this.password = password;
        this.id = new Random().nextInt(10000);
    }

    public Cart getCart() {
        return Database.carts.computeIfAbsent(email, k -> new Cart(email));
    }
}

class Cart {
    String accountEmail;
    List<Movie> items = new ArrayList<>();

    public Cart(String email) {
        this.accountEmail = email;
    }

    public void addToCart(Movie m) {
        items.add(m);
    }

    public float getTotal() {
        return (float) items.stream().mapToDouble(m -> m.cost).sum();
    }
}

class Movie {
    String title, director, showtime;
    boolean current;
    int movieId;
    float avgReview, cost;

    public Movie(String title, String director, int movieId, String showtime, float avgReview, float cost) {
        this.title = title;
        this.director = director;
        this.movieId = movieId;
        this.showtime = showtime;
        this.avgReview = avgReview;
        this.cost = cost;
    }

    public Movie(String title2, String director2, String cast, String ratiing, String summary, String reviews,
			String runtime) {
		// TODO Auto-generated constructor stub
	}

	public String toString() {
        return title + " - " + showtime + " ($" + cost + ")";
    }
	public int getInt(JTextField field) {
	    return Integer.parseInt(field.getText());
	}
}

class Payment {
    public static boolean makeCardPayment(String accountEmail, float total) {
        System.out.println("Charging $" + total + " to card for " + accountEmail);
        return true;
    }

    public static boolean makePayPalPayment(String accountEmail, float total) {
        System.out.println("Processing PayPal $" + total + " for " + accountEmail);
        return true;
    }

    public static boolean makeVenmoPayment(String accountEmail, float total) {
        System.out.println("Processing Venmo $" + total + " for " + accountEmail);
        return true;
    }
}

class Admin {
    static String adminUser = "admin";
    static String adminPass = "admin123";
    public static boolean login(String user, String pass) {
        return user.equals(adminUser) && pass.equals(adminPass);
    }
    public static void addMovie(Movie m) {
        Database.movies.add(m);
    }
    public static void deleteMovie(Movie m) {
        Database.movies.remove(m);
    }
}



class LoginScreen extends JFrame {
    JTextField emailField;
    JPasswordField passwordField;

    public LoginScreen() {
        setTitle("Movie App Login");
        setSize(300, 200);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        JPanel panel = new JPanel(new GridLayout(3, 2));
        panel.add(new JLabel("Email:"));
        emailField = new JTextField();
        panel.add(emailField);

        panel.add(new JLabel("Password:"));
        passwordField = new JPasswordField();
        panel.add(passwordField);

        JButton loginBtn = new JButton("Login");
        loginBtn.addActionListener(e -> login());
        panel.add(loginBtn);

        JButton signupBtn = new JButton("Sign Up");
        signupBtn.addActionListener(e -> signup());
        panel.add(signupBtn);

        add(panel);
        setVisible(true);
    }

    private void login() {
        String email = emailField.getText();
        String pass = new String(passwordField.getPassword());
        Account user = Database.accounts.get(email);
        if (user != null && user.password.equals(pass)) {
            dispose();
            new MainScreen(user);
        } else {
            JOptionPane.showMessageDialog(this, "Invalid login.");
        }
    }

    private void signup() {
        String email = emailField.getText();
        String pass = new String(passwordField.getPassword());
        if (!Database.accounts.containsKey(email)) {
            Database.accounts.put(email, new Account(email, pass));
            JOptionPane.showMessageDialog(this, "Account created. You can now login.");
        } else {
            JOptionPane.showMessageDialog(this, "Account already exists.");
        }
    }
}

class MainScreen extends JFrame {
    Account account;
    DefaultListModel<Movie> movieListModel = new DefaultListModel<>();
    JList<Movie> movieList;

    public MainScreen(Account account) {
        this.account = account;

        setTitle("Welcome " + account.email);
        setSize(600, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        for (Movie m : Database.movies) {
            movieListModel.addElement(m);
        }

        movieList = new JList<>(movieListModel);
        add(new JScrollPane(movieList), BorderLayout.CENTER);

        JPanel bottom = new JPanel();
        JButton addToCart = new JButton("Add to Cart");
        JButton viewCart = new JButton("View Cart");
        JButton payWithCard = new JButton("Pay with Card");
        JButton payWithPayPal = new JButton("Pay with PayPal");
        JButton payWithVenmo = new JButton("Pay with Venmo");
        if(account.email=="admin"&&account.password=="admin123") {
        	 JButton adminPage = new JButton("Administative Options");
             bottom.add(adminPage);
             adminPage.addActionListener(e ->  {new adminpage(account); dispose();});


        }
        
        

        addToCart.addActionListener(e -> {
            Movie selected = movieList.getSelectedValue();
            if (selected != null) {
                account.getCart().addToCart(selected);
                JOptionPane.showMessageDialog(this, selected.title + " added to cart.");
            }

        
        });

        viewCart.addActionListener(e -> new CartScreen(account));
        payWithCard.addActionListener(e -> Payment.makeCardPayment(account.email, account.getCart().getTotal()));
        payWithPayPal.addActionListener(e -> Payment.makePayPalPayment(account.email, account.getCart().getTotal()));
        payWithVenmo.addActionListener(e -> Payment.makeVenmoPayment(account.email, account.getCart().getTotal()));
        
        bottom.add(addToCart);
        bottom.add(viewCart);
        bottom.add(payWithCard);
        bottom.add(payWithPayPal);
        bottom.add(payWithVenmo);

        add(bottom, BorderLayout.SOUTH);
        setVisible(true);
    }
}

class CartScreen extends JFrame {
    DefaultListModel<String> cartModel = new DefaultListModel<>();
    JList<String> cartList = new JList<>(cartModel);
    JLabel totalLabel = new JLabel();
    Account account;

    public CartScreen(Account account) {
        this.account = account;

        setTitle("Your Cart");
        setSize(400, 350);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());

        refreshCartList();

        add(new JScrollPane(cartList), BorderLayout.CENTER);
        totalLabel.setHorizontalAlignment(SwingConstants.CENTER);
        add(totalLabel, BorderLayout.NORTH);

        JPanel bottomPanel = new JPanel();

        JButton removeBtn = new JButton("Remove Selected");
        removeBtn.addActionListener(e -> removeSelectedItem());

        JButton checkoutBtn = new JButton("Checkout");
        checkoutBtn.addActionListener(e -> {
            boolean paid = Payment.makeCardPayment(account.email, account.getCart().getTotal());
            if (paid) {
                account.getCart().items.clear();
                refreshCartList();
                JOptionPane.showMessageDialog(this, "Payment successful! Thank you.");
            }
        });

        bottomPanel.add(removeBtn);
        bottomPanel.add(checkoutBtn);
        add(bottomPanel, BorderLayout.SOUTH);

        setVisible(true);
    }

    private void refreshCartList() {
        cartModel.clear();
        for (Movie m : account.getCart().items) {
            cartModel.addElement(m.toString());
        }
        totalLabel.setText("Total: $" + account.getCart().getTotal());
    }

    private void removeSelectedItem() {
        int index = cartList.getSelectedIndex();
        if (index != -1) {
            account.getCart().items.remove(index);
            refreshCartList();
        }
    }
}

class adminpage extends JFrame {
    Account account;
    DefaultListModel<Movie> movieListModel = new DefaultListModel<>();
    JList<Movie> movieList;

    public adminpage(Account account) {
        this.account = account;

        setTitle("Administative Options");
        setSize(600, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);


        movieList = new JList<>(movieListModel);
        for (Movie m : Database.movies) {
            movieListModel.addElement(m);

        add(new JScrollPane(movieList), BorderLayout.CENTER);
        
        //create buttons and panel
        JPanel bottomPanel = new JPanel();
        JButton Home = new JButton("Home");
        JButton addmovie = new JButton("Add a Movie");
        JButton deleteMovie = new JButton("Remove a movie");
        
        //event handler
        Home.addActionListener(e -> { new MainScreen(account); dispose();});
        addmovie.addActionListener(e ->  {new addMovie(account); dispose(); });
        deleteMovie.addActionListener(e -> {
        	Movie selected = movieList.getSelectedValue();
            if (selected != null) {
                Database.movies.remove(selected);
                new adminpage(account);
                dispose();
                
            }
            });
        //but buttons on bottom panel
        bottomPanel.add(Home);
        bottomPanel.add(addmovie);
        bottomPanel.add(deleteMovie);
        add(bottomPanel, BorderLayout.SOUTH);

            }
        setVisible(true);
    }
}

class addMovie extends JFrame {
    Account account;
    DefaultListModel<Movie> movieListModel = new DefaultListModel<>();
    JList<Movie> movieList;
    JTextField title;
    JTextField director;
    JTextField cast;
    JTextField rating;
    JTextField current;
    JTextField reviews;
    JTextField summary;
    JTextField runtime;
    JTextField price;
    JTextField movieid;
    JTextField time;
    public int getInt(JTextField field) {//method to get int from text field
	    return Integer.parseInt(field.getText());
	}
    public float getFloat(JTextField reviews) {//method to get float from text field
	    return Float.parseFloat(reviews.getText());
	}
    
    //add image somehow

    public addMovie(Account account) {
        this.account = account;

        setTitle("Please Enter Movie Details");
        setTitle("Movie App Login");
        setSize(600, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());

        ///input text boxes
        JPanel panel = new JPanel(new GridLayout(11, 2));
        panel.add(new JLabel("Title:"));
        title = new JTextField();
        panel.add(title);
        
        panel.add(new JLabel("Director:"));
        director = new JTextField();
        panel.add(director);
        
        panel.add(new JLabel("Movie ID:"));
        movieid = new JTextField();
        panel.add(movieid);
        
        panel.add(new JLabel("Cast:"));
        cast = new JTextField();
        panel.add(cast);
        
        panel.add(new JLabel("MPA Rating:"));
        rating = new JTextField();
        panel.add(rating);
        
        panel.add(new JLabel("Customer Review(s):"));
        reviews = new JTextField();
        panel.add(reviews);
        
        panel.add(new JLabel("Summary:"));
        summary = new JTextField();
        panel.add(summary);
        
        panel.add(new JLabel("Runtime:"));
        runtime = new JTextField();
        panel.add(runtime);
        
        panel.add(new JLabel("Ticket Cost:"));
        price = new JTextField();
        panel.add(price);
        
        panel.add(new JLabel("Time:"));
        time = new JTextField();
        panel.add(time);
        add(panel, BorderLayout.CENTER);
        setVisible(true);
        
       
        
        //add panel and bottoms
        JPanel bottomPanel = new JPanel();
        JButton Home = new JButton("Home");
        JButton addmovie = new JButton("Add  Movie");
        
        //event handler
        Home.addActionListener(e ->  {new MainScreen(account); dispose();});
        addmovie.addActionListener(e -> {addmovie();dispose();new adminpage(account); });

        //bottom panel buttons
        bottomPanel.add(Home);
        bottomPanel.add(addmovie);
        add(bottomPanel, BorderLayout.SOUTH);
        setVisible(true);

            
        }
        private void addmovie() {//creates movie
            String titlef = title.getText();
            String directorf = director.getText();
            String castf = cast.getText();
            String ratingf = rating.getText();
            String summaryf = summary.getText();
            float reviewsf = getFloat(reviews);
            String runtimef = runtime.getText();
            int movieidf = getInt(movieid);
            float costf = getFloat(price);
            String timef = time.getText();

            
          //puts movie in display
            Database.movies.add(new Movie(titlef,directorf,movieidf ,timef ,reviewsf,costf));

        }

}

