<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
  <meta charset="UTF-8">
  <title>Admin - Movie Booking System</title>
  <style>
    .section { display: none; margin-top: 20px; }
    button.toggle-btn {
      background: none;
      border: none;
      color: blue;
      text-decoration: underline;
      font-size: 16px;
      cursor: pointer;
      padding: 0;
    }
    .action-buttons form {
      display: inline;
      margin: 0 4px;
    }
  </style>
</head>
<body>

<h2>
  <a th:href="@{/admin/home}" style="text-decoration: none; color: inherit;">Movie Booking System</a>
</h2>

<div style="position: absolute; top: 10px; right: 20px; font-weight: bold; font-size: 14px;">
  Welcome, <span th:text="${username}">Guest</span>
  <form th:action="@{/logout}" method="get">
    <button type="submit">Logout</button>
  </form>
</div>

<div style="margin-top: 40px;">

<!-- === MOVIE TABLE === -->
<button class="toggle-btn" onclick="toggleSection('movieTable')">Current Movies</button><br>
<div id="movieTable" class="section">
  <table border="1" cellpadding="8">
    <tr>
      <th>Title</th>
      <th>Director</th>
      <th>Showtime</th>
      <th>Location</th>
      <th>Movie ID</th>
      <th>Average Review</th>
      <th>Cost</th>
      <th>Image URL</th>
      <th>Actions</th>
    </tr>
    <tr th:each="movie : ${movies}">
      <form th:action="@{/admin/edit-movie}" method="post">
        <td><input type="text" name="title" th:value="${movie.title}" required></td>
        <td><input type="text" name="director" th:value="${movie.director}" required></td>
        <td><input type="text" name="showtime" th:value="${movie.showtime}" required></td>
        <td>
          <select name="location" required>
            <option th:each="location : ${locations}"
                    th:value="${location}"
                    th:text="${location}"
                    th:selected="${location == movie.location}">
            </option>
          </select>
        </td>
        <td><input type="number" name="movieId" th:value="${movie.movieId}" readonly></td>
        <td><input type="number" step="0.1" name="avgReview" th:value="${movie.avgReview}" required></td>
        <td><input type="number" step="0.01" name="cost" th:value="${movie.cost}" required></td>
        <td><input type="text" name="imgUrl" th:value="${movie.imgUrl}" required></td>
        <td>
          <button type="submit">Save</button>
      </form>
      <form th:action="@{/admin/delete-movie}" method="post" onsubmit="return confirm('Delete this movie from the list?');" style="display:inline;">
        <input type="hidden" name="movieId" th:value="${movie.movieId}">
        <button type="submit">Delete</button>
      </form>
        </td>
    </tr>
  </table>
</div>

<br>

<!-- === ADD MOVIE FORM === -->
<button class="toggle-btn" onclick="toggleSection('addMovieForm')">Add Movie</button><br>
<div id="addMovieForm" class="section">
  <form th:action="@{/admin/add-movie}" method="post" style="max-width: 400px;">
    <div style="display: flex; align-items: center; margin-bottom: 8px;">
      <label style="width: 100px;">Title:</label>
      <input type="text" name="title" required style="flex: 1;">
    </div>
    <div style="display: flex; align-items: center; margin-bottom: 8px;">
      <label style="width: 100px;">Director:</label>
      <input type="text" name="director" required style="flex: 1;">
    </div>
    <div style="display: flex; align-items: center; margin-bottom: 8px;">
      <label style="width: 100px;">Showtime:</label>
      <input type="text" name="showtime" required style="flex: 1;">
    </div>
    <div style="display: flex; align-items: center; margin-bottom: 8px;">
      <label style="width: 100px;">Movie ID:</label>
      <input type="number" name="movieId" required style="flex: 1;">
    </div>
    <div style="display: flex; align-items: center; margin-bottom: 8px;">
      <label style="width: 100px;">Avg Review:</label>
      <input type="number" step="0.1" name="avgReview" required style="flex: 1;">
    </div>
    <div style="display: flex; align-items: center; margin-bottom: 8px;">
      <label style="width: 100px;">Cost:</label>
      <input type="number" step="0.01" name="cost" required style="flex: 1;">
    </div>
    <div style="display: flex; align-items: center; margin-bottom: 8px;">
      <label style="width: 100px;">Locations:</label>
      <select name="locations" multiple required style="flex: 1; height: 120px;">
        <option th:each="location : ${locations}" th:value="${location}" th:text="${location}"></option>
      </select>
    </div>
    <div style="display: flex; align-items: center; margin-bottom: 8px;">
      <label style="width: 100px;">Image URL:</label>
      <input type="text" name="imgUrl" required style="flex: 1;">
    </div>
    <button type="submit">Add Movie</button>
  </form>
</div>

<br>

<!-- === ACCOUNTS TABLE === -->
<button class="toggle-btn" onclick="toggleSection('accountTable')">View Accounts</button><br>
<div id="accountTable" class="section">
  <table border="1" cellpadding="8">
    <tr>
      <th>Account ID</th>
      <th>Username</th>
      <th>Email</th>
      <th>Phone</th>
      <th>Location</th>
      <th>Actions</th>
    </tr>
    <tr th:each="account : ${accounts}">
      <td th:text="${account.id}"></td>
      <td th:text="${account.username}"></td>
      <td th:text="${account.email}"></td>
      <td th:text="${account.phone}"></td>
      <td th:text="${account.location}"></td>
      <td>
        <form th:action="@{/admin/delete-account}" method="post" onsubmit="return confirm('Are you sure you want to delete this account?');">
          <input type="hidden" name="accountId" th:value="${account.id}">
          <button type="submit">Delete</button>
        </form>
      </td>
    </tr>
  </table>
</div>

</div> <!-- End Main Div -->

<!-- === TOGGLE SCRIPT === -->
<script>
function toggleSection(id) {
  const section = document.getElementById(id);
  section.style.display = (section.style.display === "block") ? "none" : "block";
}
</script>

</body>
</html>

package com.MBSTeam4.controller;

import com.MBSTeam4.model.Database;
import com.MBSTeam4.model.Movie;
import jakarta.servlet.http.HttpSession;
import org.springframework.ui.Model;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Controller
@RequestMapping("/admin")
public class AdminController {
    
    @GetMapping("/home")
    public String homePage(Model model, HttpSession session) {
        String adminId = (String) session.getAttribute("adminId");
        
        if (adminId == null) {
            return "redirect:/home";
        } else {
            model.addAttribute("username", adminId);
            model.addAttribute("movies", Database.movies);
            model.addAttribute("locations", Database.locations);
            model.addAttribute("accounts", Database.accounts.values());
        }
        
        return "admin-home"; 
    }
    
    @PostMapping("/add-movie")
    public String addMovie(@RequestParam("title") String title, 
                           @RequestParam("director") String director,
                           @RequestParam("showtime") String showtime, 
                           @RequestParam("locations") List<String> locations,
                           @RequestParam("imgUrl") String imgUrl,
                           @RequestParam("movieId") int movieId, 
                           @RequestParam("avgReview") float avgReview, 
                           @RequestParam("cost") float cost,
                           Model model, HttpSession session) {

        if (session.getAttribute("adminId") == null) {
            return "redirect:/home";
        }

        int idIncrement = 0;
        for (String loc : locations) {
            Movie newMovie = new Movie(
                title,
                director,
                showtime,
                loc,
                imgUrl,
                movieId + idIncrement,
                avgReview,
                cost
            );
            Database.movies.add(newMovie);
            idIncrement++;
        }

        Database.saveMovies();
        model.addAttribute("success", "Movie added successfully to selected locations!");
        return "redirect:/admin/home";
    }
    
    @PostMapping("/delete-movie")
    public String deleteMovie(@RequestParam("movieId") int movieId, HttpSession session) {
        if (session.getAttribute("adminId") == null) {
            return "redirect:/home";
        }
        Database.movies.removeIf(movie -> movie.getMovieId() == movieId);
        Database.saveMovies();
        return "redirect:/admin/home";
    }
    
    @GetMapping("/edit-movie")
    public String showEditForm(@RequestParam("movieId") int movieId, Model model, HttpSession session) {
        if (session.getAttribute("adminId") == null) {
            return "redirect:/home";
        }
        for (Movie movie : Database.movies) {
            if (movie.getMovieId() == movieId) {
                model.addAttribute("movie", movie);
                return "edit-movie";
            }
        }
        return "redirect:/admin/home";
    }
    
    @PostMapping("/edit-movie")
    public String editMovie(@RequestParam("title") String title,
                            @RequestParam("director") String director,
                            @RequestParam("showtime") String showtime,
                            @RequestParam("location") String location,
                            @RequestParam("imgUrl") String imgUrl,
                            @RequestParam("movieId") int movieId,
                            @RequestParam("avgReview") float avgReview,
                            @RequestParam("cost") float cost,
                            HttpSession session) {

        if (session.getAttribute("adminId") == null) {
            return "redirect:/home";
        }

        for (Movie movie : Database.movies) {
            if (movie.getMovieId() == movieId) {
                movie.setTitle(title);
                movie.setDirector(director);
                movie.setShowtime(showtime);
                movie.setLocation(location);
                movie.setImgUrl(imgUrl);
                movie.setAvgReview(avgReview);
                movie.setCost(cost);
                break;
            }
        }
        Database.saveMovies();
        return "redirect:/admin/home";
    }
    
    @PostMapping("/delete-account")
    public String deleteAccount(@RequestParam("accountId") String accountId, HttpSession session) {
        if (session.getAttribute("adminId") == null) {
            return "redirect:/home";
        }

        Database.accounts.remove(accountId);
        Database.carts.remove(accountId); 
        Database.saveAccounts();
        Database.saveCarts();
        
        return "redirect:/admin/home";
    }
}
